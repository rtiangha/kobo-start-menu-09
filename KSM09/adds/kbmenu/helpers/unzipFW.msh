#!/bin/sh

ksmroot=${ksmroot:-"/adds/kbmenu"}

if [ "$KSMdebugmode" == "true" ]; then
  debug_logfile=$ksmroot/log/ksmdebug_$(date +%Y%m%d_%H%M%S)_$(basename $0).log
  echo "started: $(date +%Y%m%d_%H%M%S)" > $debug_logfile
  echo "script path: $0" >> $debug_logfile
  echo "ksmroot: $ksmroot" >> $debug_logfile
  echo "ksmuser: $ksmuser" >> $debug_logfile
fi


################################
# set toggle and info values
toggleoptiontext=
togglevalues=
infolines=2
infotext=
################################
thisScript=$(readlink -f $0)
################################
# check if there is ONE argument
if [[ $# != 1 ]]; then
  $ksmroot/kbmessage.sh "usage:<br>$(basename $thisScript) <b>AbsolutePathToDirectory</b>"
  exit
fi
################################
workingdir=${1%/}
if [ ! -d "$workingdir" ]; then
  $ksmroot/kbmessage.sh "directory not found: $workingdir"
  exit
fi
################################
# load some variables for kobomenu
. $ksmroot/onstart/exp_block
################################
getnexttoggleoption() {
  cnt=0;
  i=-1;
  OLDIFS="$IFS"
  IFS=" "
  for toption in $2
  do
    if [ "$toption" == "$1" ]; then
      let i=cnt
    fi
# ((++cnt))
    let ++cnt
  done
  let lastel=cnt-1
  if [ $i -eq -1 ] || [ $i -eq $lastel ]; then
    i=0
  else
    let ++i
  fi
  cnt=0
  for toption in $2
  do
    if [ $cnt -eq $i ]; then
      tresult=$toption
      break
    fi
#    ((++cnt))
    let ++cnt
  done
  IFS="$OLDIFS"
  echo $tresult
}
################################
setoptions() {
  optionlist=""
  if [ $infolines -gt 0 ]; then
    optionlist="-infotext=$infotext"
    optionlist="$optionlist -infolines=$infolines"
  fi

  if [ "$helpoption" != "" ]; then
    optionlist="$optionlist $helpoption"
  fi

  if [ "$toggleoptiontext" != "" ]; then
    optionlist="$optionlist $toggleoptiontext:toggle.png"
  fi
  if [ "$displaydirlist" != "" ]; then
    displaydirlist=$(echo $displaydirlist | xargs -n1 | sort | xargs)
    optionlist="$optionlist $displaydirlist"
  fi
  if [ "$filelist01" != "" ]; then
    if [ "$toggleoption" == "toggle-read" ]; then
      optionlist="$optionlist $filelist02"
    else
      optionlist="$optionlist $filelist01"
    fi
  fi
}
################################
if [ -e "$workingdir/help.txt" ]; then
  helpoption="help:help.png "
else
  helpoption=""
fi
################################
readdir () {
# read content of directory
OIFS="$IFS"
IFS=$'\n'
# ---------------------- fill filelist(s)
filelist01=""
for file in $(find $workingdir -maxdepth 1 -type f -name '*.zip')
do
  bar=${file/ /}
  if [ "$file" == "$bar" ]; then
    filename=$(basename $file)
    filelist01="$filelist01 $filename:menu.png"
  fi
done
IFS="$OIFS"
################################
if [ "$filelist01" != "" ]; then
  filelist01=$(echo $filelist01 | xargs -n1 | sort | xargs)
fi
################################
}
# preselect first toggle option
# toggleoption=$(getnexttoggleoption "x12y45" "$togglevalues")

################################
readdir
# do the loop
while [ "$selectedoption" != "EXIT" ]; do
setoptions
selectedoption=$($ksmroot/kobomenu.sh $optionlist return:arrowup.png return_home:arrowup.png)
case "$selectedoption" in
  return)  selectedoption="EXIT";;
  return_home)
    selectedoption="EXIT"
    echo "return_home"
    ;;
  help)
    $ksmroot/kbmessage.sh "-f $workingdir/help.txt"
    ;;
  $toggleoptiontext)
    toggleoption=$(getnexttoggleoption "$toggleoption" "$togglevalues")
#infotext="current mode:_$toggleoption"
    case $toggleoption in
      complete)
        infotext="extract_whole_content_of_the_FW_package"
        ;;
      only_KoboRoot.tgz)
        infotext="extract_only_KoboRoot.tgz"
        ::
    esac
    ;;
  *.zip)
    actionselection=$($ksmroot/kobomenu.sh extract extract_only_root_tgz delete return:arrowup.png)
    case $actionselection in
      extract )
        infotext=$($ksmroot/helpers/unzipFW.sh "$workingdir/$selectedoption" "complete")
        ;;
      extract_only_root_tgz )
        infotext=$($ksmroot/helpers/unzipFW.sh "$workingdir/$selectedoption" "only_KoboRoot.tgz")
        ;;
      delete )
        infotext=$(rm -rf "$workingdir/$selectedoption")
        readdir
#selectedoption="EXIT"
        ;;
    esac
    ;;
esac
done




